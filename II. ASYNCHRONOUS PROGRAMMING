// A.	We first have an input field asking for the user’s name. 
Create a Promise that rejects if that input field is empty, and 
resolves with the input, greeting the user with “good day, <name of user here>!” on the DOM

function greetUserA(name) {
    return new Promise((resolve, reject) => {
        if (!name) reject("Input is empty!");
        else resolve(`Good day, ${name}!`);
    });
}

// Simulate input
let inputName = "Quenzzy"; // to test rejection, change into ""

greetUserA(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// B.	We first have an input field asking for the user’s name. 
Create a Promise that rejects if that input field is empty, and 
resolves after 5 seconds with the input, greeting the user with “good day, <name of user here>!” on the DOM. 

function greetUserB(name) {
    return new Promise((resolve, reject) => {
        if (!name) reject("Input is empty!");
        else setTimeout(() => resolve(`Good day, ${name}!`), 5000);
    });
}

// Simulate input
let inputName = "Q"; // change this to "" to test rejection

greetUserB(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// C.	We first have an input field asking for the user’s name. 
Create a Promise that rejects if that input field is empty, and 
resolves after 7 seconds with the input, greeting the user with “good day, <name of user here>!” on the DOM. 

function greetUserC(name) {
    return new Promise((resolve, reject) => {
        if (!name) reject("Input is empty!");
        else setTimeout(() => resolve(`Good day, ${name}!`), 7000);
    });
}

// Simulate input
let inputName = "Quenzzy"; // change this to "" to test rejection

greetUserC(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// D.	We first have an input field asking for the user’s name. 
Create a Promise that rejects if that input field is empty, and 
resolves with the input being in uppercase format, greeting the user with “good day, <name of user here>!” on the DOM. 

function greetUserD(name) {
    return new Promise((resolve, reject) => {
        if (!name) reject("Input is empty!");
        else resolve(`Good day, ${name.toUpperCase()}!`);
    });
}

// Simulate input
let inputName = "Quenzzy"; // change this to "" to test rejection

greetUserD(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// E.	We first have an input field asking for the user’s name.
Create a Promise that rejects if that input field is empty and is less than five characters, and 
resolves with the input being in uppercase format, greeting the user with “good day, <name of user here>!” on the DOM. 

function greetUserE(name) {
    return new Promise((resolve, reject) => {
        if (!name || name.length < 5) reject("Invalid input!");
        else resolve(`Good day, ${name.toUpperCase()}!`);
    });
}

// Simulate input
let inputName = "Quenzzy"; // try "Ana" or "" to test rejection

greetUserE(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// F.	We first have an input field asking for the user’s name. 
Create a Promise that rejects if that input field is empty and is less than five characters, and 
resolves with the input being in reversed format, greeting the user with “good day, <name of user here>!” on the DOM. 

function greetUserF(name) {
    return new Promise((resolve, reject) => {
        if (!name || name.length < 5) reject("Invalid input!");
        else {
            let reversed = name.split("").reverse().join("");
            resolve(`Good day, ${reversed}!`);
        }
    });
}

// Simulate input
let inputName = "Ana"; // try "Ana" or "" to test rejection

greetUserF(inputName)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

//G.	We first have an input field asking the user to input a number. 
Create a Promise that rejects if the inputted value is not an integer and 
resolves with the integer input being squared, printing the string “<number inputted> is <squared number> when doubled ” on the DOM. 

function squareNumber(num) {
    return new Promise((resolve, reject) => {
        if (!Number.isInteger(num)) reject("Not an integer!");
        else resolve(`${num} is ${num * num} when doubled`);
    });
}

// Simulate input
let inputNum = "abc"; // try 6.5 or "abc" to test rejection

squareNumber(inputNum)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

// H.	We first have an input field asking the user to input a number. 
Create a Promise that rejects if the inputted value is not an integer and 
resolves after 5 seconds with the integer input being cubed, printing the string “<number inputted> is <cubed number> when cubed” on the DOM. 

function cubeNumber(num) {
    return new Promise((resolve, reject) => {
        if (!Number.isInteger(num)) reject("Not an integer!");
        else setTimeout(() => resolve(`${num} is ${num ** 3} when cubed`), 5000);
    });
}

// Simulate input
let inputNum = "abc"; // try 3.5 or "abc" to test rejection

cubeNumber(inputNum)
    .then(msg => console.log(msg))
    .catch(err => console.log(err));

//I.	We first have an input field asking the user to input a number. 
Create a Promise that rejects if the inputted value is not between 1 and 10 and 
resolves by printing the string “Yes <number inputted> is between 1 and 10” on the DOM.
If the user fails three times to give a number between 1 and 10, we’ll just print “You already failed three times, so no chances anymore”. 

let failCount = 0;

function validateNumber(num) {
    return new Promise((resolve, reject) => {
        if (num >= 1 && num <= 10) {
            resolve(`Yes ${num} is between 1 and 10`);
        } else {
            failCount++;
            if (failCount >= 3) {
                reject("You already failed three times, so no chances anymore");
            } else {
                reject("Invalid number, try again!");
            }
        }
    });
}

// --- Simulate tests ---
let testInputs = [11, 3, 0, 4]; 

testInputs.forEach(num => {
    validateNumber(num)
        .then(msg => console.log(msg))
        .catch(err => console.log(err));
});


